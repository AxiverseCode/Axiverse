// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Admin/AliasService.proto
// </auto-generated>
// Original file comments:
// Alias Service
//
// Administrative service for resolving aliases to addresses.
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace  {
  public static partial class AliasService
  {
    static readonly string __ServiceName = "AliasService";

    static readonly grpc::Marshaller<global::ResolveAliasRequest> __Marshaller_ResolveAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ResolveAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ResolveAliasResponse> __Marshaller_ResolveAliasResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ResolveAliasResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CreateAliasRequest> __Marshaller_CreateAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CreateAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CreateAliasResponse> __Marshaller_CreateAliasResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CreateAliasResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DeleteAliasRequest> __Marshaller_DeleteAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DeleteAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DeleteAliasResponse> __Marshaller_DeleteAliasResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DeleteAliasResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::ResolveAliasRequest, global::ResolveAliasResponse> __Method_ResolveAlias = new grpc::Method<global::ResolveAliasRequest, global::ResolveAliasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResolveAlias",
        __Marshaller_ResolveAliasRequest,
        __Marshaller_ResolveAliasResponse);

    static readonly grpc::Method<global::CreateAliasRequest, global::CreateAliasResponse> __Method_CreateAlias = new grpc::Method<global::CreateAliasRequest, global::CreateAliasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAlias",
        __Marshaller_CreateAliasRequest,
        __Marshaller_CreateAliasResponse);

    static readonly grpc::Method<global::DeleteAliasRequest, global::DeleteAliasResponse> __Method_DeleteAlias = new grpc::Method<global::DeleteAliasRequest, global::DeleteAliasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAlias",
        __Marshaller_DeleteAliasRequest,
        __Marshaller_DeleteAliasResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AliasServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AliasService</summary>
    public abstract partial class AliasServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ResolveAliasResponse> ResolveAlias(global::ResolveAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CreateAliasResponse> CreateAlias(global::CreateAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DeleteAliasResponse> DeleteAlias(global::DeleteAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AliasService</summary>
    public partial class AliasServiceClient : grpc::ClientBase<AliasServiceClient>
    {
      /// <summary>Creates a new client for AliasService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AliasServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AliasService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AliasServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AliasServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AliasServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ResolveAliasResponse ResolveAlias(global::ResolveAliasRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ResolveAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ResolveAliasResponse ResolveAlias(global::ResolveAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResolveAlias, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ResolveAliasResponse> ResolveAliasAsync(global::ResolveAliasRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ResolveAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ResolveAliasResponse> ResolveAliasAsync(global::ResolveAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResolveAlias, null, options, request);
      }
      public virtual global::CreateAliasResponse CreateAlias(global::CreateAliasRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CreateAliasResponse CreateAlias(global::CreateAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAlias, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CreateAliasResponse> CreateAliasAsync(global::CreateAliasRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CreateAliasResponse> CreateAliasAsync(global::CreateAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAlias, null, options, request);
      }
      public virtual global::DeleteAliasResponse DeleteAlias(global::DeleteAliasRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DeleteAliasResponse DeleteAlias(global::DeleteAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAlias, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DeleteAliasResponse> DeleteAliasAsync(global::DeleteAliasRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DeleteAliasResponse> DeleteAliasAsync(global::DeleteAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAlias, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AliasServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AliasServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AliasServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ResolveAlias, serviceImpl.ResolveAlias)
          .AddMethod(__Method_CreateAlias, serviceImpl.CreateAlias)
          .AddMethod(__Method_DeleteAlias, serviceImpl.DeleteAlias).Build();
    }

  }
}
#endregion
