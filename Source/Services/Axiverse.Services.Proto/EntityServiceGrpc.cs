// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EntityService.proto
// </auto-generated>
// Original file comments:
// EntityService
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Axiverse.Services.Proto {
  public static partial class EntityService
  {
    static readonly string __ServiceName = "EntityService";

    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.GetStateRequest> __Marshaller_GetStateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.GetStateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.GetStateResponse> __Marshaller_GetStateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.GetStateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.CreateEntityRequest> __Marshaller_CreateEntityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.CreateEntityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.CreateEntityResponse> __Marshaller_CreateEntityResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.CreateEntityResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.DeleteEntityRequest> __Marshaller_DeleteEntityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.DeleteEntityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.DeleteEntityResponse> __Marshaller_DeleteEntityResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.DeleteEntityResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.GetEntityRequest> __Marshaller_GetEntityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.GetEntityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.GetEntityResponse> __Marshaller_GetEntityResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.GetEntityResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.ClientEvent> __Marshaller_ClientEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.ClientEvent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.ServerEvent> __Marshaller_ServerEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.ServerEvent.Parser.ParseFrom);

    static readonly grpc::Method<global::Axiverse.Services.Proto.GetStateRequest, global::Axiverse.Services.Proto.GetStateResponse> __Method_GetState = new grpc::Method<global::Axiverse.Services.Proto.GetStateRequest, global::Axiverse.Services.Proto.GetStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetState",
        __Marshaller_GetStateRequest,
        __Marshaller_GetStateResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.CreateEntityRequest, global::Axiverse.Services.Proto.CreateEntityResponse> __Method_CreateEntity = new grpc::Method<global::Axiverse.Services.Proto.CreateEntityRequest, global::Axiverse.Services.Proto.CreateEntityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEntity",
        __Marshaller_CreateEntityRequest,
        __Marshaller_CreateEntityResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.DeleteEntityRequest, global::Axiverse.Services.Proto.DeleteEntityResponse> __Method_DeleteEntity = new grpc::Method<global::Axiverse.Services.Proto.DeleteEntityRequest, global::Axiverse.Services.Proto.DeleteEntityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEntity",
        __Marshaller_DeleteEntityRequest,
        __Marshaller_DeleteEntityResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.GetEntityRequest, global::Axiverse.Services.Proto.GetEntityResponse> __Method_GetEntity = new grpc::Method<global::Axiverse.Services.Proto.GetEntityRequest, global::Axiverse.Services.Proto.GetEntityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEntity",
        __Marshaller_GetEntityRequest,
        __Marshaller_GetEntityResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.ClientEvent, global::Axiverse.Services.Proto.ServerEvent> __Method_Stream = new grpc::Method<global::Axiverse.Services.Proto.ClientEvent, global::Axiverse.Services.Proto.ServerEvent>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Stream",
        __Marshaller_ClientEvent,
        __Marshaller_ServerEvent);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Axiverse.Services.Proto.EntityServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EntityService</summary>
    public abstract partial class EntityServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.GetStateResponse> GetState(global::Axiverse.Services.Proto.GetStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.CreateEntityResponse> CreateEntity(global::Axiverse.Services.Proto.CreateEntityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.DeleteEntityResponse> DeleteEntity(global::Axiverse.Services.Proto.DeleteEntityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.GetEntityResponse> GetEntity(global::Axiverse.Services.Proto.GetEntityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Stream(grpc::IAsyncStreamReader<global::Axiverse.Services.Proto.ClientEvent> requestStream, grpc::IServerStreamWriter<global::Axiverse.Services.Proto.ServerEvent> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EntityService</summary>
    public partial class EntityServiceClient : grpc::ClientBase<EntityServiceClient>
    {
      /// <summary>Creates a new client for EntityService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EntityServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EntityService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EntityServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EntityServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EntityServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Axiverse.Services.Proto.GetStateResponse GetState(global::Axiverse.Services.Proto.GetStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.GetStateResponse GetState(global::Axiverse.Services.Proto.GetStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetState, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.GetStateResponse> GetStateAsync(global::Axiverse.Services.Proto.GetStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.GetStateResponse> GetStateAsync(global::Axiverse.Services.Proto.GetStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetState, null, options, request);
      }
      public virtual global::Axiverse.Services.Proto.CreateEntityResponse CreateEntity(global::Axiverse.Services.Proto.CreateEntityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.CreateEntityResponse CreateEntity(global::Axiverse.Services.Proto.CreateEntityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEntity, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.CreateEntityResponse> CreateEntityAsync(global::Axiverse.Services.Proto.CreateEntityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.CreateEntityResponse> CreateEntityAsync(global::Axiverse.Services.Proto.CreateEntityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEntity, null, options, request);
      }
      public virtual global::Axiverse.Services.Proto.DeleteEntityResponse DeleteEntity(global::Axiverse.Services.Proto.DeleteEntityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEntity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.DeleteEntityResponse DeleteEntity(global::Axiverse.Services.Proto.DeleteEntityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEntity, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.DeleteEntityResponse> DeleteEntityAsync(global::Axiverse.Services.Proto.DeleteEntityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEntityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.DeleteEntityResponse> DeleteEntityAsync(global::Axiverse.Services.Proto.DeleteEntityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEntity, null, options, request);
      }
      public virtual global::Axiverse.Services.Proto.GetEntityResponse GetEntity(global::Axiverse.Services.Proto.GetEntityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.GetEntityResponse GetEntity(global::Axiverse.Services.Proto.GetEntityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEntity, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.GetEntityResponse> GetEntityAsync(global::Axiverse.Services.Proto.GetEntityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.GetEntityResponse> GetEntityAsync(global::Axiverse.Services.Proto.GetEntityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEntity, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Axiverse.Services.Proto.ClientEvent, global::Axiverse.Services.Proto.ServerEvent> Stream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Axiverse.Services.Proto.ClientEvent, global::Axiverse.Services.Proto.ServerEvent> Stream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Stream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EntityServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EntityServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EntityServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetState, serviceImpl.GetState)
          .AddMethod(__Method_CreateEntity, serviceImpl.CreateEntity)
          .AddMethod(__Method_DeleteEntity, serviceImpl.DeleteEntity)
          .AddMethod(__Method_GetEntity, serviceImpl.GetEntity)
          .AddMethod(__Method_Stream, serviceImpl.Stream).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EntityServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetState, serviceImpl.GetState);
      serviceBinder.AddMethod(__Method_CreateEntity, serviceImpl.CreateEntity);
      serviceBinder.AddMethod(__Method_DeleteEntity, serviceImpl.DeleteEntity);
      serviceBinder.AddMethod(__Method_GetEntity, serviceImpl.GetEntity);
      serviceBinder.AddMethod(__Method_Stream, serviceImpl.Stream);
    }

  }
}
#endregion
