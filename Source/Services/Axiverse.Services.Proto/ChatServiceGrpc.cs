// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChatService.proto
// </auto-generated>
// Original file comments:
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Axiverse.Services.Proto {
  public static partial class ChatService
  {
    static readonly string __ServiceName = "ChatService";

    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.JoinChannelRequest> __Marshaller_JoinChannelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.JoinChannelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.JoinChannelResponse> __Marshaller_JoinChannelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.JoinChannelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.LeaveChannelRequest> __Marshaller_LeaveChannelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.LeaveChannelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.LeaveChannelResponse> __Marshaller_LeaveChannelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.LeaveChannelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.SendMessageRequest> __Marshaller_SendMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.SendMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.SendMessageResponse> __Marshaller_SendMessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.SendMessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.ListenRequest> __Marshaller_ListenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.ListenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Axiverse.Services.Proto.ListenResponse> __Marshaller_ListenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Axiverse.Services.Proto.ListenResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Axiverse.Services.Proto.JoinChannelRequest, global::Axiverse.Services.Proto.JoinChannelResponse> __Method_JoinChannel = new grpc::Method<global::Axiverse.Services.Proto.JoinChannelRequest, global::Axiverse.Services.Proto.JoinChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinChannel",
        __Marshaller_JoinChannelRequest,
        __Marshaller_JoinChannelResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.LeaveChannelRequest, global::Axiverse.Services.Proto.LeaveChannelResponse> __Method_LeaveChannel = new grpc::Method<global::Axiverse.Services.Proto.LeaveChannelRequest, global::Axiverse.Services.Proto.LeaveChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaveChannel",
        __Marshaller_LeaveChannelRequest,
        __Marshaller_LeaveChannelResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.SendMessageRequest, global::Axiverse.Services.Proto.SendMessageResponse> __Method_SendMessage = new grpc::Method<global::Axiverse.Services.Proto.SendMessageRequest, global::Axiverse.Services.Proto.SendMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_SendMessageRequest,
        __Marshaller_SendMessageResponse);

    static readonly grpc::Method<global::Axiverse.Services.Proto.ListenRequest, global::Axiverse.Services.Proto.ListenResponse> __Method_Listen = new grpc::Method<global::Axiverse.Services.Proto.ListenRequest, global::Axiverse.Services.Proto.ListenResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Listen",
        __Marshaller_ListenRequest,
        __Marshaller_ListenResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Axiverse.Services.Proto.ChatServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChatService</summary>
    public abstract partial class ChatServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.JoinChannelResponse> JoinChannel(global::Axiverse.Services.Proto.JoinChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.LeaveChannelResponse> LeaveChannel(global::Axiverse.Services.Proto.LeaveChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Axiverse.Services.Proto.SendMessageResponse> SendMessage(global::Axiverse.Services.Proto.SendMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Listen(global::Axiverse.Services.Proto.ListenRequest request, grpc::IServerStreamWriter<global::Axiverse.Services.Proto.ListenResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatService</summary>
    public partial class ChatServiceClient : grpc::ClientBase<ChatServiceClient>
    {
      /// <summary>Creates a new client for ChatService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Axiverse.Services.Proto.JoinChannelResponse JoinChannel(global::Axiverse.Services.Proto.JoinChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.JoinChannelResponse JoinChannel(global::Axiverse.Services.Proto.JoinChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinChannel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.JoinChannelResponse> JoinChannelAsync(global::Axiverse.Services.Proto.JoinChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.JoinChannelResponse> JoinChannelAsync(global::Axiverse.Services.Proto.JoinChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinChannel, null, options, request);
      }
      public virtual global::Axiverse.Services.Proto.LeaveChannelResponse LeaveChannel(global::Axiverse.Services.Proto.LeaveChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.LeaveChannelResponse LeaveChannel(global::Axiverse.Services.Proto.LeaveChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaveChannel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.LeaveChannelResponse> LeaveChannelAsync(global::Axiverse.Services.Proto.LeaveChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.LeaveChannelResponse> LeaveChannelAsync(global::Axiverse.Services.Proto.LeaveChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaveChannel, null, options, request);
      }
      public virtual global::Axiverse.Services.Proto.SendMessageResponse SendMessage(global::Axiverse.Services.Proto.SendMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Axiverse.Services.Proto.SendMessageResponse SendMessage(global::Axiverse.Services.Proto.SendMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.SendMessageResponse> SendMessageAsync(global::Axiverse.Services.Proto.SendMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Axiverse.Services.Proto.SendMessageResponse> SendMessageAsync(global::Axiverse.Services.Proto.SendMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Axiverse.Services.Proto.ListenResponse> Listen(global::Axiverse.Services.Proto.ListenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Listen(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Axiverse.Services.Proto.ListenResponse> Listen(global::Axiverse.Services.Proto.ListenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Listen, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_JoinChannel, serviceImpl.JoinChannel)
          .AddMethod(__Method_LeaveChannel, serviceImpl.LeaveChannel)
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage)
          .AddMethod(__Method_Listen, serviceImpl.Listen).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_JoinChannel, serviceImpl.JoinChannel);
      serviceBinder.AddMethod(__Method_LeaveChannel, serviceImpl.LeaveChannel);
      serviceBinder.AddMethod(__Method_SendMessage, serviceImpl.SendMessage);
      serviceBinder.AddMethod(__Method_Listen, serviceImpl.Listen);
    }

  }
}
#endregion
